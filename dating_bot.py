import asyncio
import logging
import os
import random
import time
import json
import pickle
import signal
import atexit

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
    ApplicationBuilder,
    CallbackQueryHandler,
)

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "bot_data.pkl"

# States for the conversation
(
    GENDER,
    NAME,
    AGE,
    CITY,
    BIO,
    PHOTO,
    CONFIRMATION,
    MENU,
    SEARCH,
    LIKE,
    DISLIKE,
    SETTINGS,
    EDIT_PROFILE,
    EDIT_GENDER,
    EDIT_NAME,
    EDIT_AGE,
    EDIT_CITY,
    EDIT_BIO,
    EDIT_PHOTO,
    PENDING_MATCH_RESPONSE,
    END
) = range(21)

# Global dictionaries to store data
user_profiles = {}
user_likes = {}
user_dislikes = {}
matched_users = {}

# –ê–¥–º–∏–Ω—ã –±–æ—Ç–∞
ADMIN_USER_IDS = [5652528225]  # –ó–ê–ú–ï–ù–ò –ù–ê –†–ï–ê–õ–¨–ù–´–ï ID

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–• ---
def save_data():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
    data = {
        'user_profiles': user_profiles,
        'user_likes': user_likes,
        'user_dislikes': user_dislikes,
        'matched_users': matched_users
    }
    try:
        with open(DATA_FILE, 'wb') as f:
            pickle.dump(data, f)
        logger.info("Data saved successfully")
    except Exception as e:
        logger.error(f"Error saving data: {e}")

def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
    global user_profiles, user_likes, user_dislikes, matched_users
    try:
        with open(DATA_FILE, 'rb') as f:
            data = pickle.load(f)
            user_profiles = data.get('user_profiles', {})
            user_likes = data.get('user_likes', {})
            user_dislikes = data.get('user_dislikes', {})
            matched_users = data.get('matched_users', {})
        logger.info(f"Data loaded: {len(user_profiles)} profiles, {sum(len(l) for l in user_likes.values())} likes")
    except FileNotFoundError:
        logger.info("No existing data file, starting fresh")
    except Exception as e:
        logger.error(f"Error loading data: {e}")

def setup_data_persistence():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ"""
    def save_on_exit():
        save_data()
        logger.info("Data saved on exit")
    
    def save_on_signal(signum, frame):
        save_data()
        logger.info(f"Data saved on signal {signum}")
        exit(0)
    
    atexit.register(save_on_exit)
    signal.signal(signal.SIGINT, save_on_signal)
    signal.signal(signal.SIGTERM, save_on_signal)

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
def auto_save(func):
    async def wrapper(*args, **kwargs):
        result = await func(*args, **kwargs)
        save_data()
        return result
    return wrapper

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç ---
def clear_old_viewed_profiles(user_data):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç, –µ—Å–ª–∏ –∏—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ"""
    if 'viewed_profiles' in user_data:
        # –ï—Å–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –±–æ–ª—å—à–µ 50, –æ—á–∏—â–∞–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ
        if len(user_data['viewed_profiles']) > 50:
            user_data['viewed_profiles'] = user_data['viewed_profiles'][-25:]
            logger.info(f"Cleared old viewed profiles, now {len(user_data['viewed_profiles'])} remaining")

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ ---
@auto_save
async def clear_history_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç, –ª–∞–π–∫–∏ –∏ –¥–∏–∑–ª–∞–π–∫–∏"""
    user_id = update.effective_user.id
    user_data = context.user_data
    
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç
    if 'viewed_profiles' in user_data:
        user_data['viewed_profiles'] = []
    
    # –û—á–∏—â–∞–µ–º –ª–∞–π–∫–∏ –∏ –¥–∏–∑–ª–∞–π–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_likes:
        user_likes[user_id] = set()
    if user_id in user_dislikes:
        user_dislikes[user_id] = set()
    
    await update.message.reply_text("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã —É–≤–∏–¥–∏—Ç–µ –≤—Å–µ –∞–Ω–∫–µ—Ç—ã –∑–∞–Ω–æ–≤–æ.")

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å ---
@auto_save
async def reset_all_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    user_data = context.user_data
    
    # –û—á–∏—â–∞–µ–º –≤—Å—ë
    user_data.clear()
    if user_id in user_likes:
        user_likes[user_id] = set()
    if user_id in user_dislikes:
        user_dislikes[user_id] = set()
    if user_id in matched_users:
        matched_users[user_id] = set()
    
    await update.message.reply_text("üéØ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω! –í—Å–µ –∞–Ω–∫–µ—Ç—ã –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –∑–∞–Ω–æ–≤–æ.")

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ ---
async def stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_profiles = len(user_profiles)
    complete_profiles = len([uid for uid in user_profiles if is_profile_complete(uid)])
    total_likes = sum(len(likes) for likes in user_likes.values())
    total_matches = sum(len(matches) for matches in matched_users.values()) // 2
    
    stats_text = (
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_profiles}\n"
        f"‚Ä¢ –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç: {complete_profiles}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: {total_likes}\n"
        f"‚Ä¢ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {total_matches}\n"
        f"\n**–ü–æ –ø–æ–ª—É:**\n"
    )
    
    gender_stats = {}
    for profile in user_profiles.values():
        gender = profile.get('gender', '–ù–µ —É–∫–∞–∑–∞–Ω')
        gender_stats[gender] = gender_stats.get(gender, 0) + 1
    
    for gender, count in gender_stats.items():
        stats_text += f"‚Ä¢ {gender}: {count}\n"
    
    await update.message.reply_text(stats_text)

# Function to check if the user profile is complete
def is_profile_complete(user_id):
    profile = user_profiles.get(user_id)
    return (
        profile
        and profile.get("gender")
        and profile.get("name")
        and profile.get("age")
        and profile.get("city")
        and profile.get("bio")
        and profile.get("photo")
        and profile.get("username")
    )

# --- Helper function to display a profile ---
async def send_profile_card(user_id: int, target_user_id: int, context: ContextTypes.DEFAULT_TYPE, reply_markup=None):
    profile = user_profiles.get(target_user_id)
    if not profile:
        logger.error(f"Profile not found for user ID: {target_user_id}")
        return

    bio_text = profile.get("bio", "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    message_text = (
        f"–ò–º—è: {profile['name']}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {profile['age']}\n"
        f"–ö—É—Ä—Å: {profile['city']}\n"
        f"–û —Å–µ–±–µ: {bio_text}"
    )

    if profile.get("photo"):
        try:
            await context.bot.send_photo(
                chat_id=user_id,
                photo=profile["photo"],
                caption=message_text,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"Failed to send photo to {user_id}: {e}")
            await context.bot.send_message(
                chat_id=user_id,
                text=message_text + "\n(–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ)",
                reply_markup=reply_markup
            )
    else:
        await context.bot.send_message(
            chat_id=user_id,
            text=message_text + "\n(–§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)",
            reply_markup=reply_markup
        )

# --- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∏—Å–∫ —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç—ã ---
async def search_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    user_data = context.user_data
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
    clear_old_viewed_profiles(user_data)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if 'viewed_profiles' not in user_data:
        user_data['viewed_profiles'] = []
    
    viewed_profiles = user_data['viewed_profiles']
    available_profiles = []

    # Get profiles that the current user hasn't liked or disliked, and isn't themselves
    for profile_id, profile_data in user_profiles.items():
        if profile_id == user_id:
            continue
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ª–∞–π–∫–Ω—É–ª –∏–ª–∏ –¥–∏–∑–ª–∞–π–∫–Ω—É–ª —ç—Ç—É –∞–Ω–∫–µ—Ç—É
        if profile_id in user_likes.get(user_id, set()):
            continue
        if profile_id in user_dislikes.get(user_id, set()):
            continue
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if profile_id in matched_users.get(user_id, set()):
            continue
            
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ–ø–æ–ª–Ω—ã–π
        if not is_profile_complete(profile_id):
            continue

        available_profiles.append(profile_id)

    if not available_profiles:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç, –æ—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
        user_data['viewed_profiles'] = []
        available_profiles = [pid for pid in user_profiles.keys() 
                            if pid != user_id 
                            and is_profile_complete(pid)
                            and pid not in user_likes.get(user_id, set())
                            and pid not in user_dislikes.get(user_id, set())
                            and pid not in matched_users.get(user_id, set())]
        
        if not available_profiles:
            await update.message.reply_text("–ü–æ–∫–∞ —á—Ç–æ –±–æ–ª—å—à–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!",
                                            reply_markup=ReplyKeyboardMarkup([
                                                [KeyboardButton("–ü–æ–∏—Å–∫")],
                                                [KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
                                            ], resize_keyboard=True))
            return MENU

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∞–Ω–∫–µ—Ç—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    next_profile_id = random.choice(available_profiles)
    context.user_data['current_viewing_profile_id'] = next_profile_id

    keyboard = [
        [KeyboardButton("‚ù§Ô∏è –õ–∞–π–∫"), KeyboardButton("‚ùå –î–∏–∑–ª–∞–π–∫")],
        [KeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await send_profile_card(user_id, next_profile_id, context, reply_markup)
    return SEARCH

# --- Notification functions ---
@auto_save
async def notify_liked_user(liker_id: int, liked_id: int, context: ContextTypes.DEFAULT_TYPE):
    liker_profile = user_profiles.get(liker_id)
    if not liker_profile:
        logger.error(f"Liker profile not found for ID: {liker_id}")
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º InlineKeyboardButtons –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ª–∞–π–∫
    keyboard = [
        [InlineKeyboardButton("‚ù§Ô∏è –õ–∞–π–∫–Ω—É—Ç—å –≤ –æ—Ç–≤–µ—Ç", callback_data=f"like_back_{liker_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"dislike_back_{liker_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É –ª–∞–π–∫–Ω—É–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–∞–π–∫–Ω—É—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await context.bot.send_message(
        chat_id=liked_id,
        text="–¢–µ–±—è –ª–∞–π–∫–Ω—É–ª–∏! –í–æ—Ç —á—å—è –∞–Ω–∫–µ—Ç–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    await send_profile_card(liked_id, liker_id, context, reply_markup)

@auto_save
async def notify_match(user1_id: int, user2_id: int, context: ContextTypes.DEFAULT_TYPE):
    user1_profile = user_profiles.get(user1_id)
    user2_profile = user_profiles.get(user2_id)

    if not user1_profile or not user2_profile:
        logger.error(f"One of the matched profiles not found: {user1_id}, {user2_id}")
        return

    user1_username = user1_profile.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    user2_username = user2_profile.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

    match_message_for_user1 = (
        f"üéâ –£ —Ç–µ–±—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å {user2_profile['name']}! "
        f"–ï–≥–æ/–µ—ë Telegram: @{user2_username}"
    )
    match_message_for_user2 = (
        f"üéâ –£ —Ç–µ–±—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å {user1_profile['name']}! "
        f"–ï–≥–æ/–µ—ë Telegram: @{user1_username}"
    )

    await context.bot.send_message(chat_id=user1_id, text=match_message_for_user1)
    await context.bot.send_message(chat_id=user2_id, text=match_message_for_user2)

    # Add to matched_users
    if user1_id not in matched_users:
        matched_users[user1_id] = set()
    matched_users[user1_id].add(user2_id)

    if user2_id not in matched_users:
        matched_users[user2_id] = set()
    matched_users[user2_id].add(user1_id)

# --- Conversation Handlers ---
@auto_save
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Starts the conversation and asks the user about their gender."""
    user_id = update.message.from_user.id
    # Store username early
    if user_id not in user_profiles:
        user_profiles[user_id] = {}
    user_profiles[user_id]["username"] = update.message.from_user.username

    if is_profile_complete(user_id):
        keyboard = [
            [KeyboardButton("–ü–æ–∏—Å–∫")],
            [KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=reply_markup,
        )
        return MENU
    else:
        keyboard = [["–ú—É–∂—Å–∫–æ–π"], ["–ñ–µ–Ω—Å–∫–∏–π"], ["–î—Ä—É–≥–æ–µ"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:",
            reply_markup=reply_markup,
        )

        return GENDER

@auto_save
async def gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Stores the gender and asks for the name."""
    user_id = update.message.from_user.id
    context.user_data["gender"] = update.message.text
    if user_id not in user_profiles:
        user_profiles[user_id] = {}
    user_profiles[user_id]["gender"] = update.message.text
    if "username" not in user_profiles[user_id]:
        user_profiles[user_id]["username"] = update.message.from_user.username

    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–µ –∏–º—è:", reply_markup=ReplyKeyboardRemove()
    )
    return NAME

@auto_save
async def name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Stores the name and asks for the age."""
    user_id = update.message.from_user.id
    context.user_data["name"] = update.message.text
    user_profiles[user_id]["name"] = update.message.text

    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (–æ—Ç 16 –¥–æ 25)")
    return AGE

@auto_save
async def age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Stores the age and asks for the city."""
    user_id = update.message.from_user.id
    try:
        age = int(update.message.text)
        if age < 16 or age > 25:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (16-25):"
            )
            return AGE
        context.user_data["age"] = age
        user_profiles[user_id]["age"] = age

        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∫—É—Ä—Å (–æ—Ç 1 –¥–æ 5):")
        return CITY
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.")
        return AGE

@auto_save
async def city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Stores the city (course) and asks for the bio."""
    user_id = update.message.from_user.id
    try:
        course = int(update.message.text)
        if course < 1 or course > 5:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –∫—É—Ä—Å (1-5):"
            )
            return CITY
        context.user_data["city"] = course
        user_profiles[user_id]["city"] = course

        await update.message.reply_text("–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (–∏–Ω—Ç–µ—Ä–µ—Å—ã, —Ö–æ–±–±–∏ –∏ —Ç.–¥.):")
        return BIO
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫—É—Ä—Å —Ü–∏—Ñ—Ä–∞–º–∏ (1-5).")
        return CITY

@auto_save
async def bio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Stores the bio and asks for a photo."""
    user_id = update.message.from_user.id
    context.user_data["bio"] = update.message.text
    user_profiles[user_id]["bio"] = update.message.text

    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –ª—É—á—à—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:")
    return PHOTO

@auto_save
async def photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Stores the photo and asks for confirmation."""
    user_id = update.message.from_user.id
    if update.message.photo:
        photo_file_id = update.message.photo[-1].file_id
        context.user_data["photo"] = photo_file_id
        user_profiles[user_id]["photo"] = photo_file_id

        # Display the profile for confirmation
        profile = user_profiles[user_id]
        bio_text = profile.get("bio", "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        message_text = (
            f"–í–æ—Ç —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"–ü–æ–ª: {profile['gender']}\n"
            f"–ò–º—è: {profile['name']}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {profile['age']}\n"
            f"–ö—É—Ä—Å: {profile['city']}\n"
            f"–û —Å–µ–±–µ: {bio_text}"
        )

        keyboard = [
            [KeyboardButton("–î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ"), KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

        await context.bot.send_photo(
            chat_id=user_id,
            photo=photo_file_id,
            caption=message_text,
            reply_markup=reply_markup
        )
        return CONFIRMATION
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        return PHOTO

@auto_save
async def confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Confirms the profile or allows editing."""
    user_id = update.message.from_user.id
    if update.message.text == "–î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ":
        keyboard = [
            [KeyboardButton("–ü–æ–∏—Å–∫")],
            [KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫.",
            reply_markup=reply_markup,
        )
        return MENU
    elif update.message.text == "–ò–∑–º–µ–Ω–∏—Ç—å":
        return await settings(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ '–î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ' –∏–ª–∏ '–ò–∑–º–µ–Ω–∏—Ç—å'.")
        return CONFIRMATION

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Main menu for the user."""
    text = update.message.text
    if text == "–ü–æ–∏—Å–∫":
        return await search_profile(update, context)
    elif text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        return await settings(update, context)
    else:
        keyboard = [
            [KeyboardButton("–ü–æ–∏—Å–∫")],
            [KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        return MENU

async def search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handles the '–ü–æ–∏—Å–∫' command, initiating profile search."""
    return await search_profile(update, context)

@auto_save
async def like(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """User likes the current profile."""
    liker_id = update.message.from_user.id
    liked_id = context.user_data.get('current_viewing_profile_id')
    user_data = context.user_data

    if not liked_id:
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫.",
                                        reply_markup=ReplyKeyboardMarkup([
                                            [KeyboardButton("–ü–æ–∏—Å–∫")],
                                            [KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
                                        ], resize_keyboard=True))
        return MENU

    if liker_id not in user_likes:
        user_likes[liker_id] = set()
    user_likes[liker_id].add(liked_id)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
    if 'viewed_profiles' not in user_data:
        user_data['viewed_profiles'] = []
    if liked_id not in user_data['viewed_profiles']:
        user_data['viewed_profiles'].append(liked_id)

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
    clear_old_viewed_profiles(user_data)

    # Check for mutual like (liked_id liked liker_id previously)
    if liked_id in user_likes and liker_id in user_likes[liked_id]:
        # It's a match!
        await notify_match(liker_id, liked_id, context)
        await update.message.reply_text("–£–†–ê! –≠—Ç–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ! üéâ")
        return await search_profile(update, context)
    else:
        # Not a mutual like yet, notify the liked_id
        await notify_liked_user(liker_id, liked_id, context)
        await update.message.reply_text("–õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫...")
        return await search_profile(update, context)

@auto_save
async def dislike(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """User dislikes the current profile."""
    disliker_id = update.message.from_user.id
    disliked_id = context.user_data.get('current_viewing_profile_id')
    user_data = context.user_data

    if not disliked_id:
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫.",
                                        reply_markup=ReplyKeyboardMarkup([
                                            [KeyboardButton("–ü–æ–∏—Å–∫")],
                                            [KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
                                        ], resize_keyboard=True))
        return MENU

    if disliker_id not in user_dislikes:
        user_dislikes[disliker_id] = set()
    user_dislikes[disliker_id].add(disliked_id)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
    if 'viewed_profiles' not in user_data:
        user_data['viewed_profiles'] = []
    if disliked_id not in user_data['viewed_profiles']:
        user_data['viewed_profiles'].append(disliked_id)

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
    clear_old_viewed_profiles(user_data)

    await update.message.reply_text("–ê–Ω–∫–µ—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫...")
    return await search_profile(update, context)

async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Shows settings options."""
    keyboard = [
        [KeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")],
        [KeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=reply_markup)
    return SETTINGS

async def edit_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Allows user to choose what to edit."""
    keyboard = [
        [KeyboardButton("–ü–æ–ª"), KeyboardButton("–ò–º—è"), KeyboardButton("–í–æ–∑—Ä–∞—Å—Ç")],
        [KeyboardButton("–ö—É—Ä—Å"), KeyboardButton("–û —Å–µ–±–µ"), KeyboardButton("–§–æ—Ç–æ")],
        [KeyboardButton("–ì–æ—Ç–æ–≤–æ")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=reply_markup)
    return EDIT_PROFILE

@auto_save
async def edit_gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [["–ú—É–∂—Å–∫–æ–π"], ["–ñ–µ–Ω—Å–∫–∏–π"], ["–î—Ä—É–≥–æ–µ"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–ª:", reply_markup=reply_markup)
    return EDIT_GENDER

@auto_save
async def save_edit_gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    user_profiles[user_id]["gender"] = update.message.text
    await update.message.reply_text("–ü–æ–ª –æ–±–Ω–æ–≤–ª–µ–Ω.")
    return await edit_profile(update, context)

@auto_save
async def edit_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    return EDIT_NAME

@auto_save
async def save_edit_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    user_profiles[user_id]["name"] = update.message.text
    await update.message.reply_text("–ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    return await edit_profile(update, context)

@auto_save
async def edit_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 16 –¥–æ 25):")
    return EDIT_AGE

@auto_save
async def save_edit_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    try:
        age = int(update.message.text)
        if age < 16 or age > 25:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (16-25):")
            return EDIT_AGE
        user_profiles[user_id]["age"] = age
        await update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω.")
        return await edit_profile(update, context)
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.")
        return EDIT_AGE

@auto_save
async def edit_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å (–æ—Ç 1 –¥–æ 5):")
    return EDIT_CITY

@auto_save
async def save_edit_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    try:
        course = int(update.message.text)
        if course < 1 or course > 5:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –∫—É—Ä—Å (1-5):")
            return EDIT_CITY
        user_profiles[user_id]["city"] = course
        await update.message.reply_text("–ö—É—Ä—Å –æ–±–Ω–æ–≤–ª–µ–Ω.")
        return await edit_profile(update, context)
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫—É—Ä—Å —Ü–∏—Ñ—Ä–∞–º–∏ (1-5).")
        return EDIT_CITY

@auto_save
async def edit_bio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ:")
    return EDIT_BIO

@auto_save
async def save_edit_bio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    user_profiles[user_id]["bio"] = update.message.text
    await update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    return await edit_profile(update, context)

@auto_save
async def edit_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:")
    return EDIT_PHOTO

@auto_save
async def save_edit_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    if update.message.photo:
        photo_file_id = update.message.photo[-1].file_id
        user_profiles[user_id]["photo"] = photo_file_id
        await update.message.reply_text("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        return await edit_profile(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        return EDIT_PHOTO

async def show_my_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    if not is_profile_complete(user_id):
        await update.message.reply_text("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω.")
        return MENU

    profile = user_profiles[user_id]
    bio_text = profile.get("bio", "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    message_text = (
        f"–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"–ü–æ–ª: {profile['gender']}\n"
        f"–ò–º—è: {profile['name']}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {profile['age']}\n"
        f"–ö—É—Ä—Å: {profile['city']}\n"
        f"–û —Å–µ–±–µ: {bio_text}"
    )

    keyboard = [
        [KeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    if profile.get("photo"):
        await context.bot.send_photo(
            chat_id=user_id,
            photo=profile["photo"],
            caption=message_text,
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            message_text + "\n(–§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)",
            reply_markup=reply_markup
        )
    return SETTINGS

async def done_editing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Returns to settings menu after editing."""
    await update.message.reply_text("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=ReplyKeyboardRemove())
    return await settings(update, context)

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Returns to the main menu."""
    keyboard = [
        [KeyboardButton("–ü–æ–∏—Å–∫")],
        [KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.", reply_markup=reply_markup)
    return MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancels the current conversation."""
    user = update.message.from_user
    logger.info("User %s canceled the conversation.", user.first_name)
    await update.message.reply_text(
        "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ù–∞–¥–µ—é—Å—å, –º—ã –µ—â–µ –ø–æ–æ–±—â–∞–µ–º—Å—è.", reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

# --- CallbackQueryHandler for InlineKeyboardButtons (Like Back / Dislike Back) ---
@auto_save
async def handle_match_response(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    liked_id = query.from_user.id
    callback_data = query.data
    
    if callback_data.startswith("like_back_"):
        liker_id_str = callback_data.replace("like_back_", "")
        action = "like_back"
    elif callback_data.startswith("dislike_back_"):
        liker_id_str = callback_data.replace("dislike_back_", "")
        action = "dislike_back"
    else:
        logger.error(f"Unknown callback data: {callback_data}")
        return

    try:
        liker_id = int(liker_id_str)
    except ValueError:
        logger.error(f"Invalid liker_id in callback data: {liker_id_str}")
        return

    try:
        if action == "like_back":
            if liked_id not in user_likes:
                user_likes[liked_id] = set()
            user_likes[liked_id].add(liker_id)

            await notify_match(liker_id, liked_id, context)
            try:
                await query.edit_message_text(text="–£–†–ê! –≠—Ç–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ! üéâ")
            except Exception as e:
                logger.warning(f"Could not edit message, sending new one: {e}")
                await context.bot.send_message(
                    chat_id=liked_id,
                    text="–£–†–ê! –≠—Ç–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ! üéâ"
                )
        elif action == "dislike_back":
            if liked_id not in user_dislikes:
                user_dislikes[liked_id] = set()
            user_dislikes[liked_id].add(liker_id)
            
            try:
                await query.edit_message_text(text="–ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
            except Exception as e:
                logger.warning(f"Could not edit message, sending new one: {e}")
                await context.bot.send_message(
                    chat_id=liked_id,
                    text="–ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
                )

    except Exception as e:
        logger.error(f"Error in handle_match_response: {e}")
        await context.bot.send_message(
            chat_id=liked_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞."
        )

    keyboard = [
        [KeyboardButton("–ü–æ–∏—Å–∫")],
        [KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    try:
        await context.bot.send_message(
            chat_id=liked_id,
            text="–ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Error sending menu message: {e}")

def main() -> None:
    """Run the bot."""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    load_data()
    setup_data_persistence()
    
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    
    if not token:
        token = "8284692267:AAFw8z70NazDrTdLq53iaBC-KCz1cnT35NM"
        logger.warning("Using hardcoded token. For production, set TELEGRAM_BOT_TOKEN environment variable.")
    
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN environment variable not set.")
        exit(1)

    application = Application.builder().token(token).build()

    # Add conversation handler with states
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, gender)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age)],
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city)],
            BIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, bio)],
            PHOTO: [MessageHandler(filters.PHOTO, photo)],
            CONFIRMATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirmation)],
            MENU: [
                MessageHandler(filters.Regex("^–ü–æ–∏—Å–∫$"), search),
                MessageHandler(filters.Regex("^–ù–∞—Å—Ç—Ä–æ–π–∫–∏$"), settings),
            ],
            SEARCH: [
                MessageHandler(filters.Regex("^‚ù§Ô∏è –õ–∞–π–∫$"), like),
                MessageHandler(filters.Regex("^‚ùå –î–∏–∑–ª–∞–π–∫$"), dislike),
                MessageHandler(filters.Regex("^‚¨ÖÔ∏è –ú–µ–Ω—é$"), back_to_menu),
            ],
            SETTINGS: [
                MessageHandler(filters.Regex("^–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å$"), edit_profile),
                MessageHandler(filters.Regex("^–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å$"), show_my_profile),
                MessageHandler(filters.Regex("^–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é$"), clear_history_handler),
                MessageHandler(filters.Regex("^‚¨ÖÔ∏è –ú–µ–Ω—é$"), back_to_menu),
            ],
            EDIT_PROFILE: [
                MessageHandler(filters.Regex("^–ü–æ–ª$"), edit_gender),
                MessageHandler(filters.Regex("^–ò–º—è$"), edit_name),
                MessageHandler(filters.Regex("^–í–æ–∑—Ä–∞—Å—Ç$"), edit_age),
                MessageHandler(filters.Regex("^–ö—É—Ä—Å$"), edit_city),
                MessageHandler(filters.Regex("^–û —Å–µ–±–µ$"), edit_bio),
                MessageHandler(filters.Regex("^–§–æ—Ç–æ$"), edit_photo),
                MessageHandler(filters.Regex("^–ì–æ—Ç–æ–≤–æ$"), done_editing),
            ],
            EDIT_GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_edit_gender)],
            EDIT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_edit_name)],
            EDIT_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_edit_age)],
            EDIT_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_edit_city)],
            EDIT_BIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_edit_bio)],
            EDIT_PHOTO: [MessageHandler(filters.PHOTO, save_edit_photo)],
        },
        fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.TEXT | filters.PHOTO | filters.Document.ALL, back_to_menu)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(handle_match_response))
    application.add_handler(CommandHandler("clear", clear_history_handler))
    application.add_handler(CommandHandler("reset", reset_all_handler))
    application.add_handler(CommandHandler("stats", stats_handler))

    # Run the bot until the user presses Ctrl-C
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
